{
  "name": "puid-js",
  "version": "1.3.1",
  "description": "Simple, fast, flexible and efficient generation of probably unique identifiers (`puid`, aka random strings) of intuitively specified entropy using pre-defined or custom characters, including unicode",
  "main": "build/main/index.js",
  "types": "build/main/index.d.ts",
  "module": "build/module/index.js",
  "sideEffects": false,
  "exports": {
    ".": {
      "types": "./build/main/index.d.ts",
      "require": "./build/main/index.js",
      "import": "./build/module/index.js"
    },
    "./web": {
      "types": "./build/main/web.d.ts",
      "require": "./build/main/web.js",
      "import": "./build/module/web.js"
    },
    "./chars": {
      "types": "./build/main/lib/chars.d.ts",
      "require": "./build/main/lib/chars.js",
      "import": "./build/module/lib/chars.js"
    },
    "./entropy": {
      "types": "./build/main/lib/entropy.d.ts",
      "require": "./build/main/lib/entropy.js",
      "import": "./build/module/lib/entropy.js"
    },
    "./puid": {
      "types": "./build/main/lib/puid.d.ts",
      "require": "./build/main/lib/puid.js",
      "import": "./build/module/lib/puid.js"
    },
    "./package.json": "./package.json"
  },
  "repository": "https://github.com/puid/JavaScript",
  "bugs": {
    "url": "https://github.com/puid/JavaScript/issues"
  },
  "homepage": "https://github.com/puid/JavaScript#readme",
  "publishConfig": {
    "access": "public",
    "provenance": true
  },
  "license": "MIT",
  "keywords": [
    "random",
    "random ID",
    "random string",
    "security",
    "entropy",
    "uuid",
    "token"
  ],
  "scripts": {
    "build": "yarn run build:main && yarn run build:module",
    "build:main": "rm -rf ./build/main && tsc",
    "build:module": "tsc -p tsconfig.module.json",
    "build:pack": "yarn build && npm pack",
    "build:test": "rm -rf ./build/test && tsc -p tsconfig.test.json",
    "check-cli": "run-s test diff-integration-tests check-integration-tests",
    "check-integration-tests": "run-s check-integration-test:*",
    "cov": "run-s build test:unit cov:html cov:lcov && open-cli coverage/index.html",
    "cov:html": "nyc report --reporter=html",
    "cov:lcov": "nyc report --reporter=lcov",
    "cov:send": "run-s cov:lcov && codecov",
    "cov:check": "nyc report && nyc check-coverage --lines 100 --functions 100 --branches 100",
    "doc": "run-s doc:html && open-cli build/docs/index.html",
    "doc:html": "typedoc src/ --exclude **/*.spec.ts --target ES6 --mode file --out build/docs",
    "doc:json": "typedoc src/ --exclude **/*.spec.ts --target ES6 --mode file --json build/docs/typedoc.json",
    "diff-integration-tests": "mkdir -p diff && rm -rf diff/test && cp -r test diff/test && rm -rf diff/test/test-*/.git && cd diff && git init --quiet && git add -A && git commit --quiet --no-verify --allow-empty -m 'WIP' && echo '\\n\\nCommitted most recent integration test output in the \"diff\" directory. Review the changes with \"cd diff && git diff HEAD\" or your preferred git diff viewer.'",
    "doc:publish": "gh-pages -m \"[ci skip] Updates\" -d build/docs",
    "fix": "run-s fix:*",
    "fix:prettier": "prettier \"src/**/*.ts\" --write",
    "fix:lint": "eslint src --ext .ts --fix",
    "lint": "eslint src --ext .ts",
    "prepare-release": "run-s reset-hard test cov:check doc:html version doc:publish",
    "reset-hard": "git clean -dfx && git reset --hard && yarn",
    "test": "run-s build test:*",
    "test:clean": "rm -rf ./build/*test*",
    "test:data": "yarn test:clean && yarn build:test && yarn ava src/data.spec.ts",
    "test:prettier": "prettier \"src/**/*.ts\" --list-different",
    "test:unit": "yarn test:clean && yarn build:test && nyc --silent ava",
    "watch:build": "tsc -p tsconfig.json -w",
    "watch:test": "nyc --silent ava --watch",
    "pack:verify": "npm pack --json | node -e \"let s='';process.stdin.on('data',d=>s+=d).on('end',()=>{const j=JSON.parse(s)[0];console.log(j.filename);for(const f of j.files) console.log(f.path)})\"",
    "version": "standard-version",
    "prepublishOnly": "yarn build"
  },
  "engines": {
    "node": ">=18"
  },
  "devDependencies": {
    "@ava/typescript": "^6.0.0",
    "@istanbuljs/nyc-config-typescript": "^1.0.2",
    "@types/node": "^24.3.0",
    "@typescript-eslint/eslint-plugin": "^8.41.0",
    "@typescript-eslint/parser": "^8.41.0",
    "ava": "^6.4.1",
    "codecov": "^3.8.3",
    "cz-conventional-changelog": "^3.3.0",
    "eslint": "^9.34.0",
    "eslint-config-prettier": "^10.1.8",
    "eslint-plugin-eslint-comments": "^3.2.0",
    "eslint-plugin-functional": "^9.0.2",
    "eslint-plugin-import": "^2.32.0",
    "gh-pages": "^6.3.0",
    "npm-run-all": "^4.1.5",
    "nyc": "^17.1.0",
    "open-cli": "^8.0.0",
    "prettier": "^3.6.2",
    "standard-version": "^9.5.0",
    "ts-node": "^10.9.2",
    "typedoc": "^0.28.11",
    "typescript": "^5.9.2"
  },
  "files": [
    "build/main",
    "build/module",
    "!**/*.spec.*",
    "!**/*.json",
    "CHANGELOG.md",
    "LICENSE.txt",
    "README.md"
  ],
  "ava": {
    "failFast": true,
    "timeout": "60s",
    "typescript": {
      "compile": "tsc",
      "rewritePaths": {
        "src/": "build/test/"
      }
    },
    "files": [
      "!build/module/**"
    ]
  },
  "config": {
    "commitizen": {
      "path": "cz-conventional-changelog"
    }
  },
  "prettier": {
    "printWidth": 120,
    "semi": false,
    "singleQuote": true,
    "trailingComma": "none"
  },
  "nyc": {
    "extends": "@istanbuljs/nyc-config-typescript",
    "exclude": [
      "**/*.spec.ts",
      "src/lib/prngBytes.ts",
      "src/lib/util.ts"
    ]
  },
  "packageManager": "yarn@4.9.4+sha512.7b1cb0b62abba6a537b3a2ce00811a843bea02bcf53138581a6ae5b1bf563f734872bd47de49ce32a9ca9dcaff995aa789577ffb16811da7c603dcf69e73750b"
}
